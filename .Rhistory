devtools::document()
devtools::document()
rlang::last_error()
8
pkgload:::abort_for_missing_packages(res, imports$package)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::vignettes()
setwd("D:/StatComp20088/StatComp20088")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
install/
e
install.packages("qpdf")
setwd("D:/StatComp20088/StatComp20088/data")
redwineData <- read.table("wineData_red.csv",sep = ";")
save(redwineData,compress = TRUE)
save(redwineData,compress = TRUE,file = "redwineData")
setwd("D:/StatComp20088/StatComp20088")
devtools::check()
# GP binary regression model
library("MASS")
# calculate teh inverse of a symmetric matrix
mymatinv=function (smatrix, sB = "sB", det = F, log = T, jitter = 1e-10)
{
mat = smatrix + diag(jitter, dim(smatrix)[1])
smatrix = mat
if (is.character(sB))
sB = diag(1, dim(mat)[1])
else sB = as.matrix(sB)
x = solve(smatrix, sB)
d = NULL
if (det == T) {
L = chol(smatrix)
if (log == T)
d = 2 * log(prod(diag(L)))
if (log == F)
d = prod(diag(L))
}
return(list(res = as.matrix(x), det = d))
}
# covariance for a Gaussian kernel
cov.func=function(hyper,x1,x2){
n <- length(x1)
#x <- c(x[u==0],x[u>0])
x1.mat <- matrix(rep(x1,n),ncol=n)
X1 <- (x1.mat - t(x1.mat))^2
X1 <- -0.5*exp(hyper[2])*X1
x2.mat <- matrix(rep(x2,n),ncol=n)
X2 <- (x2.mat - t(x2.mat))^2
X2 <- -0.5*exp(hyper[3])*X2
X <- X1 + X2
Cov.K <- exp(hyper[1])*exp(X)  + diag(1e-4,dim(X)[1])
Cov.K <- as.matrix(Cov.K)
return(Cov.K)
}
#log-likelihood
y.loglike <- function(hyper,f.hat,x1,x2,y){
n <- length(x1)
temp <- lapply(f.hat, exp)
temp <- as.numeric(temp)
temp1 <- 1/(1 + temp)
temp2 <- 1 - temp1
A <- diag(as.vector(temp1*temp2),n)
K <- cov.func(hyper,x1,x2)
invK <- mymatinv(K)$res
squ <- t(f.hat)%*%invK%*%f.hat
l <- 0.5*log(det(K)) + 0.5*squ[1,1]+0.5*log(det(invK + A))
return(l)
}
#first derivative of the log-likelilhood in terms of hyper
y.Dloglike <- function(hyper,f.hat,x1,x2,y){
n <- length(x1)
temp <- lapply(f.hat, exp)
temp <- as.numeric(temp)
temp1 <- 1/(1 + temp)
temp2 <- 1 - temp1
A <- diag(as.vector(temp1*temp2),n)
K <- cov.func(hyper,x1,x2)
invK <- mymatinv(K)$res
B <- invK + mymatinv(invK + A)$res
# partial v
DK.v <-  K/exp(hyper[1])
squ.v <- t(f.hat)%*%invK%*%DK.v%*%invK%*%f.hat
Dlike.v <- 0.5*sum(diag(B%*%DK.v)) - 0.5*squ.v[1,1]
# partial w1
x1.mat <- matrix(rep(x1,n),ncol=n)
X1 <- (x1.mat - t(x1.mat))^2
DK.w1 <- -0.5*X1*K
squ.w1 <- t(f.hat)%*%invK%*%DK.w1%*%invK%*%f.hat
Dlike.w1 <- 0.5*sum(diag(B%*%DK.w1)) - 0.5*squ.w1[1,1]
# partial w2
x2.mat <- matrix(rep(x2,n),ncol=n)
X2 <- (x2.mat - t(x2.mat))^2
DK.w2 <- -0.5*X2*K
squ.w2 <- t(f.hat)%*%invK%*%DK.w2%*%invK%*%f.hat
Dlike.w2 <- 0.5*sum(diag(B%*%DK.w2)) - 0.5*squ.w2[1,1]
# gradiant
Dlike <- c(Dlike.v,Dlike.w1,Dlike.w2)
return(Dlike)
}
# gamma
gamma.f <- function(f,hyper,x1,x2,y){
n <- length(y)
temp1 <- lapply(f*y, exp)
temp1 <- as.numeric(temp1)
temp2 <- lapply(f, exp)
temp2 <- 1 + as.numeric(temp2)
temp <- lapply(temp1/temp2,log)
temp <- as.numeric(temp)
part1 <- sum(temp)
K <- cov.func(hyper,x1,x2)
invK <- mymatinv(K)$res
squ <- t(f)%*%invK%*%f
part2 <- -0.5*log(det(K))-0.5*squ[1,1]-0.5*n*log(2*pi)
g <- part1 + part2
return(-g)
}
#  the first derivative of gamma in terms of f
Dgamma.f <- function(f,hyper,x1,x2,y){
temp <- lapply(f, exp)
temp <- 1 + as.numeric(temp)
temp.pi <- 1 - 1/temp
K <- cov.func(hyper,x1,x2)
invK <- mymatinv(K)$res
# gradient
D <- -y + temp.pi + invK%*%f
return(as.vector(D))
}
# main function
main.func <- function(hyper,x1,x2,y){
hyper.0 <- hyper
n <- length(x1)
mu.0 <-numeric(n)
I <- diag(n)
f.initial <- mvrnorm(1,mu = mu.0,Sigma = I)
f.0 <- nlminb(f.initial,gamma.f,Dgamma.f,hyper = hyper.0,x1=x1,x2=x2,y=y)
f.0 <- f.0[[1]]
hyper.1 <- nlminb(hyper.0,y.loglike,y.Dloglike,f.hat = f.0,x1=x1,x2=x2,y=y)
hyper.1 <- hyper.1[[1]]
#hyper.0 <- hyper.1
f.1 <- nlminb(f.0,gamma.f,Dgamma.f,hyper = hyper.1,x1=x1,x2=x2,y=y)
f.1 <- f.1[[1]]
while (sum(abs(hyper.1 -hyper.0)) + sum(abs(f.1- f.0)) >1e-6) {
f.0 <- f.1
hyper.0 <- hyper.1
hyper.1 <- nlminb(hyper.0,y.loglike,y.Dloglike,f.hat = f.0,x1=x1,x2=x2,y=y)
hyper.1 <- hyper.1[[1]]
f.1 <- nlminb(f.0,gamma.f,Dgamma.f,hyper = hyper.1,x1=x1,x2=x2,y=y)
f.1 <- f.1[[1]]
}
result <- list('hyper'=hyper.1, 'f'=f.1)
return(result)
}
# predicting function
y.predict <- function(hyper,x1,x2,x1.new,x2.new,f.hat){
n <- length(x1)
K <- cov.func(hyper,x1,x2)
invK <- mymatinv(K)$res
k <- numeric(n)
for (i in 1:n) {
temp <- exp(hyper[2])*(x1.new-x1[i])**2 + exp(hyper[3])*(x2.new - x2[i])**2
k[i] <- exp(hyper[1])*exp(-0.5*temp)
}
f.new.hat <- t(k)%*%invK%*%f.hat
f.new.hat <- f.new.hat[1,1]
return(f.new.hat)
}
# real data analysis
# train
data <- read.table("winequality-red.csv",sep = ";")
y.train <- data[2:101,12]
y.train <- as.numeric(y.train)
y.train[y.train<4] <- 0
y.train[y.train>=4] <- 1
x1.train <- data[2:101,1]
x1.train <- as.numeric(x1.train)
x2.train <- data[2:101,2]
x2.train <- as.numeric(x2.train)
hyper <- c(1,-1,-1)
result <- main.func(hyper,x1.train,x2.train,y.train)
hyper.fit <- result$hyper
f.fit <- result$f
y.fit <- numeric(length(y.train))
y.fit[f.fit >= 0] <- 1
plot(x1.train,x2.train,pch=1,col=y.train+1,main = "True")
plot(x1.train,x2.train,pch=2,col=y.fit+1,main = "Fited")
accuracy.train <- length(y.train[y.train==y.fit])/length(y.train)
#test
y.test <- data[102:201,12]
y.test <- as.numeric(y.test)
y.test[y.test<4] <- 0
y.test[y.test>=4] <- 1
x1.test <- data[102:201,1]
x1.test <- as.numeric(x1.test)
x2.test <- data[102:201,2]
x2.test <- as.numeric(x2.test)
len.test <- length(y.test)
f.predict <- numeric(len.test)
y.pred <- numeric(len.test)
for (i in 1:len.test) {
f.predict[i] <- y.predict(hyper.fit,x1.train,x2.train,x1.test[i],x2.test[i],f.fit)
}
y.pred[f.predict>=0] <- 1
plot(x1.test,x2.test,pch=1,col=y.test+1,main = "True")
plot(x1.test,x2.test,pch=2,col=y.pred+1,main = "Predicted")
accuracy.test <- length(y.test[y.test==y.pred])/length(y.test)
accuracy.test
setwd("D:/StatComp20088/StatComp20088/data")
data <- read.table("wineData_red.csv",sep = ";")
data
save(data,compress = TRUE,file = "redwineData.rda")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
setwd("D:/StatComp20088")
install.packages('StatComp20088_1.0.tar.zip',repo=NULL)
install.packages('StatComp20088_1.0.tar.gz',repo=NULL)
install.packages('StatComp20088_1.0.zip',repo=NULL)
setwd("D:/StatComp20088")
install.packages("D:/StatComp20088/StatComp20088_1.0.tar.gz", repos = NULL, type = "source")
library(StatComp20088)
remove.packages("StatComp20088", lib="~/R/win-library/4.0")
setwd("D:/StatComp20088/StatComp20088")
setwd("D:/StatComp20088/StatComp20088")
devtools::document()
rm(list = c("cov.func", "Dgamma.f", "gamma.f", "mymatinv", "y.Dloglike", "y.loglike"))
devtools::build_vignettes()
devtools::check()
setwd("D:/StatComp20088/StatComp20088")
devtools::build()
install.packages("D:/StatComp20088/StatComp20088_1.0.tar.gz", repos = NULL, type = "source")
install.packages("D:/StatComp20088/StatComp20088_1.0.tar.gz", repos = NULL, type = "source")
library("StatComp20088")
library("MASS")
set.seed(18)
data <- read.table("winequality-red.csv",sep = ";")
y.train <- data[2:101,12]
y.train <- as.numeric(y.train)
y.train[y.train<7] <- 0
y.train[y.train>=7] <- 1
x1.train <- data[2:101,1]
x1.train <- as.numeric(x1.train)
x2.train <- data[2:101,2]
x2.train <- as.numeric(x2.train)
hyper <- c(1,-1,-1)
options(warn = -1)
result <- fit.GPbinary(hyper,x1.train,x2.train,y.train)
hyper.fit <- result$hyper
f.fit <- result$f
y.fit <- numeric(length(y.train))
y.fit[f.fit >= 0] <- 1
plot(x1.train,x2.train,pch=1,col=y.train+1,main = "True")
plot(x1.train,x2.train,pch=2,col=y.fit+1,main = "Fited")
accuracy.train <- length(y.train[y.train==y.fit])/length(y.train)
#test
y.test <- data[102:201,12]
y.test <- as.numeric(y.test)
y.test[y.test<7] <- 0
y.test[y.test>=7] <- 1
x1.test <- data[102:201,1]
x1.test <- as.numeric(x1.test)
x2.test <- data[102:201,2]
x2.test <- as.numeric(x2.test)
len.test <- length(y.test)
f.predict <- numeric(len.test)
y.pred <- numeric(len.test)
for (i in 1:len.test) {
f.predict[i] <- GP.predict(hyper.fit,x1.train,x2.train,x1.test[i],x2.test[i],f.fit)
}
y.pred[f.predict>=0] <- 1
plot(x1.test,x2.test,pch=1,col=y.test+1,main = "True")
plot(x1.test,x2.test,pch=2,col=y.pred+1,main = "Predicted")
accuracy.test <- length(y.test[y.test==y.pred])/length(y.test)
accuracy.test
setwd("D:/StatComp20088/StatComp20088")
